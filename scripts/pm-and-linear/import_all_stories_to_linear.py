#!/usr/bin/env python3\n\"\"\"\nBulk import all Issues & Sub-Issues from spacs/issues/04-0.1.0-mvp/ to Linear.\n\nUsage:\n    python3 scripts/import_all_stories_to_linear.py [--execute]\n\nOptions:\n    --execute: Actually execute the MCP tool calls (otherwise, just print)\n\"\"\"\n\nimport json\nimport sys\nfrom pathlib import Path\nfrom datetime import datetime\n\n# Epic IDs (from previous creation)\nEPIC_IDS = {\n    \"01-architecture-and-roadmap\": \"d73afcf8-c619-477c-be8a-f37a6f65df1f\",  # OPEN204-34\n    \"02-index-core\": \"f74e791b-93f2-48b3-8c7c-cc36e800cd84\",  # OPEN204-27\n    \"03-cli-tools\": \"b2b4dad2-ef56-4e12-94c1-ac21b3226152\",  # OPEN204-28\n    \"04-agent-integration\": \"f278d4f9-70e9-4429-9e2f-dfed6bd402b0\",  # OPEN204-29\n    \"05-api-contracts\": \"b12d9b56-91b7-4d55-9542-68813c4fdbb8\",  # OPEN204-30\n    \"06-refactor-parity\": \"d6411801-fd03-40a4-b7a4-6f317a217d06\",  # OPEN204-31\n    \"07-deployment\": \"5de00ead-71f6-4891-9b12-9917ad4d5aa7\",  # OPEN204-32\n    \"08-testing\": \"5ecf9a61-3838-4ffe-9a7f-5d720474e973\",  # OPEN204-33\n    \"09-roadmap\": \"b8d27425-e134-45c9-ac27-caebd41a3ddb\",  # OPEN204-35\n    \"10-extensibility\": \"7d7dc0de-588e-44c1-9057-fe4426b47e64\",  # OPEN204-36\n}\n\n# Project and team IDs\nPROJECT_ID = \"3828ef78-eab8-4276-82a3-9bd81e68d57f\"\nTEAM_ID = \"open2049\"\n\n# Label components by epic\nCOMPONENT_LABELS = {\n    \"01-architecture-and-roadmap\": \"component/architecture\",\n    \"02-index-core\": \"component/index-core\",\n    \"03-cli-tools\": \"component/cli\",\n    \"04-agent-integration\": \"component/agent\",\n    \"05-api-contracts\": \"component/api\",\n    \"06-refactor-parity\": \"component/parity\",\n    \"07-deployment\": \"component/deployment\",\n    \"08-testing\": \"component/testing\",\n    \"09-roadmap\": \"component/roadmap\",\n    \"10-extensibility\": \"component/extensibility\",\n}\n\nclass StoryDefinition:\n    def __init__(self, title, epic_key, source_path, description=\"\", labels=None):\n        self.title = title\n        self.epic_key = epic_key\n        self.source_path = source_path\n        self.description = description\n        self.labels = labels or []\n\n# All Stories to create\nSTORIES = [\n    # 01: Architecture & Roadmap\n    StoryDefinition(\n        title=\"Architecture & Roadmap Documentation Synthesis\",\n        epic_key=\"01-architecture-and-roadmap\",\n        source_path=\"01-architecture-and-roadmap.md\",\n        labels=[\"component/architecture\", \"type/docs\", \"phase/p4-stabilization\"],\n    ),\n    \n    # 02: Index Core (Sub-issues)\n    StoryDefinition(\n        title=\"Graph Build\",\n        epic_key=\"02-index-core\",\n        source_path=\"02-index-core/01-graph-build.md\",\n        labels=[\"component/index-core\", \"area/graph\", \"phase/p1-foundation\"],\n    ),\n    StoryDefinition(\n        title=\"Sparse Index\",\n        epic_key=\"02-index-core\",\n        source_path=\"02-index-core/02-sparse-index.md\",\n        labels=[\"component/index-core\", \"area/bm25\", \"phase/p1-foundation\"],\n    ),\n    StoryDefinition(\n        title=\"Service Layer\",\n        epic_key=\"02-index-core\",\n        source_path=\"02-index-core/03-service-layer.md\",\n        labels=[\"component/index-core\", \"area/service\", \"phase/p2-core\"],\n    ),\n    StoryDefinition(\n        title=\"Serialization & Fixtures\",\n        epic_key=\"02-index-core\",\n        source_path=\"02-index-core/04-serialization-fixtures.md\",\n        labels=[\"component/index-core\", \"area/serialization\", \"phase/p1-foundation\"],\n    ),\n    \n    # 03: CLI Tools (Sub-issues)\n    StoryDefinition(\n        title=\"Command Implementation\",\n        epic_key=\"03-cli-tools\",\n        source_path=\"03-cli-tools/01-command-impl.md\",\n        labels=[\"component/cli\", \"area/commands\", \"phase/p2-core\"],\n    ),\n    StoryDefinition(\n        title=\"Output Format\",\n        epic_key=\"03-cli-tools\",\n        source_path=\"03-cli-tools/02-output-format.md\",\n        labels=[\"component/cli\", \"area/output\", \"phase/p2-core\"],\n    ),\n    StoryDefinition(\n        title=\"CLI Integration Tests\",\n        epic_key=\"03-cli-tools\",\n        source_path=\"03-cli-tools/03-integration-tests.md\",\n        labels=[\"component/cli\", \"type/test\", \"phase/p3-integration\"],\n    ),\n    StoryDefinition(\n        title=\"CLI Docs\",\n        epic_key=\"03-cli-tools\",\n        source_path=\"03-cli-tools/04-docs.md\",\n        labels=[\"component/cli\", \"type/docs\", \"phase/p2-core\"],\n    ),\n    \n    # 04: Agent Integration (Sub-issues)\n    StoryDefinition(\n        title=\"SDK Bootstrap\",\n        epic_key=\"04-agent-integration\",\n        source_path=\"04-agent-integration/01-sdk-bootstrap.md\",\n        labels=[\"component/agent\", \"area/hooks\", \"phase/p2-core\"],\n    ),\n    StoryDefinition(\n        title=\"Prompt Design\",\n        epic_key=\"04-agent-integration\",\n        source_path=\"04-agent-integration/02-prompt-design.md\",\n        labels=[\"component/agent\", \"area/prompts\", \"phase/p2-core\"],\n    ),\n    StoryDefinition(\n        title=\"Agent Hooks\",\n        epic_key=\"04-agent-integration\",\n        source_path=\"04-agent-integration/03-hooks.md\",\n        labels=[\"component/agent\", \"area/hooks\", \"phase/p2-core\"],\n    ),\n    StoryDefinition(\n        title=\"Sample Transcripts\",\n        epic_key=\"04-agent-integration\",\n        source_path=\"04-agent-integration/04-sample-transcripts.md\",\n        labels=[\"component/agent\", \"type/docs\", \"phase/p3-integration\"],\n    ),\n    \n    # 05: API Contracts\n    StoryDefinition(\n        title=\"API Contracts & Specifications\",\n        epic_key=\"05-api-contracts\",\n        source_path=\"05-api-contracts.md\",\n        labels=[\"component/api\", \"type/spec\", \"phase/p1-foundation\"],\n    ),\n    \n    # 06: Refactor Parity\n    StoryDefinition(\n        title=\"Rust Refactor Parity Validation\",\n        epic_key=\"06-refactor-parity\",\n        source_path=\"06-refactor-parity.md\",\n        labels=[\"component/parity\", \"type/test\", \"phase/p3-integration\"],\n    ),\n    \n    # 07: Deployment (Sub-issues)\n    StoryDefinition(\n        title=\"Local Daemon Configuration\",\n        epic_key=\"07-deployment\",\n        source_path=\"07-deployment/01-local-daemon.md\",\n        labels=[\"component/deployment\", \"area/daemon\", \"phase/p3-integration\"],\n    ),\n    StoryDefinition(\n        title=\"Docker Compose Setup\",\n        epic_key=\"07-deployment\",\n        source_path=\"07-deployment/02-docker-compose.md\",\n        labels=[\"component/deployment\", \"area/compose\", \"phase/p3-integration\"],\n    ),\n    StoryDefinition(\n        title=\"Environment Configuration\",\n        epic_key=\"07-deployment\",\n        source_path=\"07-deployment/03-env-config.md\",\n        labels=[\"component/deployment\", \"area/daemon\", \"phase/p3-integration\"],\n    ),\n    StoryDefinition(\n        title=\"Monitoring & Health Checks\",\n        epic_key=\"07-deployment\",\n        source_path=\"07-deployment/04-monitoring.md\",\n        labels=[\"component/deployment\", \"area/monitoring\", \"phase/p3-integration\"],\n    ),\n    StoryDefinition(\n        title=\"Deployment Docs\",\n        epic_key=\"07-deployment\",\n        source_path=\"07-deployment/05-docs.md\",\n        labels=[\"component/deployment\", \"type/docs\", \"phase/p3-integration\"],\n    ),\n    \n    # 08: Testing & Quality (Sub-issues)\n    StoryDefinition(\n        title=\"Unit Tests\",\n        epic_key=\"08-testing\",\n        source_path=\"08-testing/01-unit-tests.md\",\n        labels=[\"component/testing\", \"type/test\", \"phase/p2-core\"],\n    ),\n    StoryDefinition(\n        title=\"Integration Test Suite\",\n        epic_key=\"08-testing\",\n        source_path=\"08-testing/02-integration.md\",\n        labels=[\"component/testing\", \"type/test\", \"phase/p2-core\"],\n    ),\n    StoryDefinition(\n        title=\"Parity Tests\",\n        epic_key=\"08-testing\",\n        source_path=\"08-testing/03-parity.md\",\n        labels=[\"component/testing\", \"type/test\", \"phase/p3-integration\"],\n    ),\n    StoryDefinition(\n        title=\"Benchmarking\",\n        epic_key=\"08-testing\",\n        source_path=\"08-testing/04-benchmark.md\",\n        labels=[\"component/testing\", \"area/benchmark\", \"phase/p3-integration\"],\n    ),\n    \n    # 09: Roadmap\n    StoryDefinition(\n        title=\"Product Roadmap Document\",\n        epic_key=\"09-roadmap\",\n        source_path=\"09-roadmap.md\",\n        labels=[\"component/roadmap\", \"type/docs\", \"phase/p4-stabilization\"],\n    ),\n    \n    # 10: Extensibility\n    StoryDefinition(\n        title=\"Extensibility & Future Planning\",\n        epic_key=\"10-extensibility\",\n        source_path=\"10-extensibility.md\",\n        labels=[\"component/extensibility\", \"type/docs\", \"phase/p4-stabilization\"],\n    ),\n]\n\ndef generate_create_issue_command(story):\n    \"\"\"Generate MCP create_issue command for a story.\"\"\"\n    epic_id = EPIC_IDS.get(story.epic_key)\n    if not epic_id:\n        raise ValueError(f\"No Epic ID found for {story.epic_key}\")\n    \n    # Build description\n    description = f\"**Source**: spacs/issues/04-0.1.0-mvp/{story.source_path}\\n\\n\"\n    if story.description:\n        description += story.description\n    \n    return {\n        \"title\": story.title,\n        \"description\": description,\n        \"parentId\": epic_id,\n        \"project\": PROJECT_ID,\n        \"team\": TEAM_ID,\n        \"labels\": story.labels,\n    }\n\ndef format_for_output(commands, max_display=10):\n    \"\"\"Format commands for display.\"\"\"\n    output = []\n    output.append(f\"# Linear Stories Bulk Import\")\n    output.append(f\"\\nTimestamp: {datetime.now().isoformat()}\")\n    output.append(f\"Total Stories: {len(commands)}\")\n    output.append(f\"\\n## Commands to Execute\\n\")\n    \n    for i, cmd in enumerate(commands, 1):\n        if i <= max_display:\n            output.append(f\"{i:2d}. create_issue(\\\"\")\n            output.append(f'    title: \"{cmd[\"title\"]}\",\\n')\n            output.append(f'    parentId: \"{cmd[\"parentId\"]}\",\\n')\n            output.append(f'    labels: {json.dumps(cmd[\"labels\"])}')\n            output.append(f'\")')\n        elif i == max_display + 1:\n            output.append(f\"\\n... and {len(commands) - max_display} more stories ...\\n\")\n    \n    output.append(f\"\\n✅ Ready to execute {len(commands)} Story creation commands via Linear MCP tools\")\n    output.append(f\"\\n## Full Command Details\\n\")\n    output.append(json.dumps(commands, indent=2))\n    \n    return \"\\n\".join(output)\n\ndef save_commands_to_file(commands, filepath):\n    \"\"\"Save commands to JSON file for reference.\"\"\"\n    with open(filepath, \"w\") as f:\n        json.dump({\n            \"timestamp\": datetime.now().isoformat(),\n            \"total_stories\": len(commands),\n            \"commands\": commands,\n        }, f, indent=2)\n    print(f\"✅ Commands saved to {filepath}\")\n\ndef main():\n    execute = \"--execute\" in sys.argv\n    \n    print(\"\\n\" + \"=\"*80)\n    print(\"CDSAgent Linear Stories Bulk Import\")\n    print(\"=\"*80 + \"\\n\")\n    \n    # Generate commands\n    commands = []\n    try:\n        for story in STORIES:\n            cmd = generate_create_issue_command(story)\n            commands.append(cmd)\n    except ValueError as e:\n        print(f\"❌ Error: {e}\")\n        sys.exit(1)\n    \n    # Display summary\n    print(f\"Generated {len(commands)} Story creation commands:\\n\")\n    \n    # Show first few\n    for i, cmd in enumerate(commands[:5], 1):\n        print(f\"{i}. {cmd['title']}\")\n        print(f\"   Parent: {cmd['parentId'][:8]}...\")\n        print(f\"   Labels: {', '.join(cmd['labels'])}\\n\")\n    \n    if len(commands) > 5:\n        print(f\"... and {len(commands) - 5} more\\n\")\n    \n    # Save to file\n    output_file = Path(\"/Users/arthur/dev-space/CDSAgent/spacs/plan/LINEAR_STORIES_COMMANDS.json\")\n    output_file.parent.mkdir(parents=True, exist_ok=True)\n    save_commands_to_file(commands, str(output_file))\n    \n    # Print formatted output\n    formatted = format_for_output(commands, max_display=5)\n    print(formatted)\n    \n    if execute:\n        print(\"\\n\" + \"=\"*80)\n        print(\"EXECUTING MCP COMMANDS...\")\n        print(\"=\"*80)\n        # TODO: Implement actual MCP tool execution here\n        print(\"\\n⚠️  Execution not yet implemented. Commands ready in:\")\n        print(f\"   {output_file}\")\n    else:\n        print(\"\\n\" + \"=\"*80)\n        print(\"To execute these commands, run:\")\n        print(f\"  python3 scripts/import_all_stories_to_linear.py --execute\")\n        print(\"=\"*80 + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n"