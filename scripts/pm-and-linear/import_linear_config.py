#!/usr/bin/env python3\n\"\"\"\nBulk import CDSAgent 0.1.0-MVP configuration to Linear workspace.\nReads from spacs/plan/0.1.0-mvp-linear-manifest.json and creates all artifacts.\n\"\"\"\n\nimport json\nimport sys\nfrom pathlib import Path\n\n# All labels with colors\nLABELS = {\n    # Component (10)\n    \"component/index-core\": {\"color\": \"#FF6B6B\", \"desc\": \"CDS-Index Service (Rust core graph indexing)\"},\n    \"component/cli\": {\"color\": \"#4ECDC4\", \"desc\": \"CDS-Tools CLI (Rust command-line interface)\"},\n    \"component/agent\": {\"color\": \"#95E1D3\", \"desc\": \"CDS-Agent (TypeScript LLM orchestration)\"},\n    \"component/deployment\": {\"color\": \"#FFE66D\", \"desc\": \"Deployment & Operations\"},\n    \"component/testing\": {\"color\": \"#A8E6CF\", \"desc\": \"Testing & Quality Assurance\"},\n    \"component/api\": {\"color\": \"#FF8B94\", \"desc\": \"API Contracts & Specifications\"},\n    \"component/architecture\": {\"color\": \"#C7CEEA\", \"desc\": \"Architecture & Design\"},\n    \"component/parity\": {\"color\": \"#B5EAD7\", \"desc\": \"LocAgent Refactoring Parity\"},\n    \"component/roadmap\": {\"color\": \"#FFDAC1\", \"desc\": \"Roadmap & Planning\"},\n    \"component/extensibility\": {\"color\": \"#E2F0CB\", \"desc\": \"Extensibility & Future Features\"},\n    \n    # Type (8)\n    \"type/feature\": {\"color\": \"#2E86DE\", \"desc\": \"New feature implementation\"},\n    \"type/spike\": {\"color\": \"#A23E48\", \"desc\": \"Research & prototype work\"},\n    \"type/docs\": {\"color\": \"#6C757D\", \"desc\": \"Documentation only\"},\n    \"type/test\": {\"color\": \"#28A745\", \"desc\": \"Testing & quality\"},\n    \"type/refactor\": {\"color\": \"#FFC107\", \"desc\": \"Code refactoring\"},\n    \"type/infra\": {\"color\": \"#FD7E14\", \"desc\": \"Infrastructure & tooling\"},\n    \"type/bug\": {\"color\": \"#DC3545\", \"desc\": \"Bug fix\"},\n    \"type/ci\": {\"color\": \"#6F42C1\", \"desc\": \"CI/CD configuration\"},\n    \n    # Phase (4)\n    \"phase/p1-foundation\": {\"color\": \"#FF6B6B\", \"desc\": \"Phase 1: Weeks 1-2 Foundation\"},\n    \"phase/p2-core\": {\"color\": \"#4ECDC4\", \"desc\": \"Phase 2: Weeks 3-5 Core Services\"},\n    \"phase/p3-integration\": {\"color\": \"#95E1D3\", \"desc\": \"Phase 3: Weeks 6-7 Integration\"},\n    \"phase/p4-stabilization\": {\"color\": \"#FFE66D\", \"desc\": \"Phase 4: Weeks 8-10 Stabilization\"},\n    \n    # Priority (4)\n    \"priority/p0\": {\"color\": \"#FF0000\", \"desc\": \"Blocker - Critical path\"},\n    \"priority/p1\": {\"color\": \"#FF8C00\", \"desc\": \"High - Important\"},\n    \"priority/p2\": {\"color\": \"#FFD700\", \"desc\": \"Medium - Should do\"},\n    \"priority/p3\": {\"color\": \"#90EE90\", \"desc\": \"Low - Nice to have\"},\n    \n    # Size (5)\n    \"size/xs\": {\"color\": \"#E3F2FD\", \"desc\": \"Trivial (< 2 hours)\"},\n    \"size/s\": {\"color\": \"#BBDEFB\", \"desc\": \"Small (2-4 hours)\"},\n    \"size/m\": {\"color\": \"#90CAF9\", \"desc\": \"Medium (1-2 days)\"},\n    \"size/l\": {\"color\": \"#64B5F6\", \"desc\": \"Large (3-5 days)\"},\n    \"size/xl\": {\"color\": \"#42A5F5\", \"desc\": \"XL (1+ weeks)\"},\n    \n    # Risk & Flags (4)\n    \"risk/high\": {\"color\": \"#DC3545\", \"desc\": \"High risk item\"},\n    \"risk/medium\": {\"color\": \"#FFC107\", \"desc\": \"Medium risk\"},\n    \"flag/blocker\": {\"color\": \"#FF1744\", \"desc\": \"Blocks other work\"},\n    \"flag/spec-change\": {\"color\": \"#00BCD4\", \"desc\": \"Spec or requirements changed\"},\n    \n    # Area (13)\n    \"area/graph\": {\"color\": \"#FFCDD2\", \"desc\": \"Graph construction & AST parsing\"},\n    \"area/bm25\": {\"color\": \"#F8BBD0\", \"desc\": \"BM25 indexing & search\"},\n    \"area/service\": {\"color\": \"#E1BEE7\", \"desc\": \"JSON-RPC service layer\"},\n    \"area/serialization\": {\"color\": \"#D1C4E9\", \"desc\": \"Graph serialization & storage\"},\n    \"area/commands\": {\"color\": \"#C5CAE9\", \"desc\": \"CLI command implementation\"},\n    \"area/output\": {\"color\": \"#BBDEFB\", \"desc\": \"Output formatting & display\"},\n    \"area/hooks\": {\"color\": \"#B3E5FC\", \"desc\": \"Claude SDK hooks\"},\n    \"area/prompts\": {\"color\": \"#B2DFDB\", \"desc\": \"Prompt design & orchestration\"},\n    \"area/daemon\": {\"color\": \"#C8E6C9\", \"desc\": \"Daemon configuration (systemd/launchd)\"},\n    \"area/compose\": {\"color\": \"#DCEDC8\", \"desc\": \"Docker Compose orchestration\"},\n    \"area/monitoring\": {\"color\": \"#FFF9C4\", \"desc\": \"Monitoring & observability\"},\n    \"area/benchmark\": {\"color\": \"#FFCCBC\", \"desc\": \"Performance benchmarking\"},\n    \"area/ci\": {\"color\": \"#FFAB91\", \"desc\": \"CI/CD and automation\"},\n}\n\ndef print_label_creation_commands():\n    \"\"\"Generate Linear MCP tool commands for creating labels.\"\"\"\n    print(\"# Generated label creation commands for Linear MCP\")\n    print(f\"\\nTotal labels to create: {len(LABELS)}\")\n    print(\"\\nUsage: Run each command with call_mcp_tool(\\\"create_issue_label\\\", input_json)\\n\")\n    \n    for i, (name, attrs) in enumerate(LABELS.items(), 1):\n        cmd = {\n            \"name\": name,\n            \"color\": attrs[\"color\"],\n            \"description\": attrs[\"desc\"]\n        }\n        print(f\"{i:2d}. {json.dumps(cmd)}\")\n\ndef load_manifest(path: str) -> dict:\n    \"\"\"Load configuration manifest.\"\"\"\n    with open(path) as f:\n        return json.load(f)\n\ndef print_epic_creation_commands(manifest: dict):\n    \"\"\"Generate Linear MCP commands for creating Epics.\"\"\"\n    print(\"\\n\" + \"=\"*80)\n    print(\"EPIC CREATION COMMANDS\")\n    print(\"=\"*80)\n    \n    for epic in manifest.get(\"epics\", []):\n        print(f\"\\nEpic: {epic['title']}\")\n        print(f\"  Team: {epic['team']}\")\n        print(f\"  Milestone: {epic['milestone']}\")\n        print(f\"  Labels: {', '.join(epic.get('labels', []))}\")\n        print(f\"  Description: {epic['description']}\")\n        print(f\"  Source: {epic['source_path']}\")\n\ndef print_import_summary(manifest: dict):\n    \"\"\"Print summary of data to import.\"\"\"\n    print(\"\\n\" + \"=\"*80)\n    print(\"IMPORT SUMMARY\")\n    print(\"=\"*80)\n    print(f\"Workspace: {manifest.get('workspace')}\")\n    print(f\"Project: {manifest.get('project_name')}\")\n    print(f\"Teams: {len(manifest.get('teams', {}))}\")\n    print(f\"Cycles: {len(manifest.get('cycles', []))}\")\n    print(f\"Milestones: {len(manifest.get('milestones', []))}\")\n    print(f\"Epics: {len(manifest.get('epics', []))}\")\n    print(f\"Stories: {len(manifest.get('stories', []))}\")\n    print(f\"Labels to create: {len(LABELS)}\")\n\nif __name__ == \"__main__\":\n    repo_root = Path(__file__).parent.parent\n    manifest_path = repo_root / \"spacs\" / \"plan\" / \"0.1.0-mvp-linear-manifest.json\"\n    \n    if not manifest_path.exists():\n        print(f\"Error: Manifest not found at {manifest_path}\")\n        sys.exit(1)\n    \n    manifest = load_manifest(str(manifest_path))\n    \n    print(\"CDSAgent 0.1.0-MVP Linear Configuration Generator\")\n    print(\"=\"*80)\n    \n    # Print summaries\n    print_import_summary(manifest)\n    print_label_creation_commands()\n    print_epic_creation_commands(manifest)\n    \n    print(\"\\n\" + \"=\"*80)\n    print(\"NEXT STEPS:\")\n    print(\"=\"*80)\n    print(\"\"\"\n1. Copy label creation commands above\n2. For each label, call: call_mcp_tool(\"create_issue_label\", {input_json})\n3. After labels, create Epics using the commands above\n4. Import Stories/Tasks from spacs/issues/ directory\n5. Link PRDs as project documents\n6. Establish dependencies and critical path\n    \"\"\")\n"