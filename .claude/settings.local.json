{
  "permissions": {
    "allow": [
      "Bash(bun install)",
      "Bash(cargo fmt --all)",
      "Bash(cargo check --all)",
      "Bash(cargo clippy --all-targets --all-features)",
      "Bash(bun run lint)",
      "Bash(git checkout -b feat/dev-environment-setup)",
      "Bash(test -d cds-agent)",
      "Bash(tree -L 3 crates/cds-index/src)",
      "Bash(tree -L 3 cds-agent)",
      "Bash(git worktree list)",
      "Bash(git worktree add .worktrees/T-05-01-jsonrpc-schema -b feat/task/T-05-01-jsonrpc-schema main)",
      "Bash(git worktree add .worktrees/T-02-01-graph-builder -b feat/task/T-02-01-graph-builder main)",
      "Bash(git worktree add .worktrees/T-02-02-sparse-index -b feat/task/T-02-02-sparse-index main)",
      "Bash(git worktree add .worktrees/T-02-03-service-layer -b feat/task/T-02-03-service-layer main)",
      "Bash(git worktree add .worktrees/T-03-01-cli-commands -b feat/task/T-03-01-cli-commands main)",
      "Bash(git worktree add .worktrees/T-04-01-agent-sdk -b feat/task/T-04-01-agent-sdk main)",
      "Bash(git worktree add .worktrees/T-04-02-prompt-design -b feat/task/T-04-02-prompt-design main)",
      "Bash(chmod +x scripts/worktree-symlink.sh)",
      "Bash(./scripts/worktree-symlink.sh create)",
      "Bash(./scripts/worktree-symlink.sh list)",
      "Bash(git add .gitignore scripts/ docs/WORKTREE_WORKFLOW.md DEVELOPMENT_STATUS.md)",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat(infra): setup git worktree development workflow\n\nAdd comprehensive git worktree infrastructure for parallel task development:\n\n- Create 7 task branch worktrees for 0.1.0-MVP implementation\n  - T-05-01-jsonrpc-schema (API contracts)\n  - T-02-01-graph-builder (Core graph implementation)\n  - T-02-02-sparse-index (BM25 + name index)\n  - T-02-03-service-layer (JSON-RPC service)\n  - T-03-01-cli-commands (CLI tools)\n  - T-04-01-agent-sdk (Agent integration)\n  - T-04-02-prompt-design (Agent prompts)\n\n- Add worktree symlink manager script (scripts/worktree-symlink.sh)\n  - Automated symlink creation for IDE access\n  - List, create, and remove operations\n  - Color-coded CLI output\n\n- Add comprehensive documentation\n  - docs/WORKTREE_WORKFLOW.md: Complete workflow guide\n  - scripts/README.md: Script documentation\n  - DEVELOPMENT_STATUS.md: Current project status\n\n- Update .gitignore to exclude .worktrees/ directory\n\nBenefits:\n- Parallel development on multiple tasks\n- No branch switching overhead\n- IDE-friendly symlinked access\n- Clean, isolated task branches\n\nAll worktrees accessible via ~/dev-space/CDSAgent-T-XX-XX symlinks\nEOF\n)\")",
      "Bash(git push origin feat/dev-environment-setup)",
      "Bash(git add .claude/settings.local.json AGENTS.md CLAUDE.md DEVELOPMENT_STATUS.md docs/WORKTREE_WORKFLOW.md)",
      "Bash(chmod +x scripts/sync-worktrees.sh)",
      "Bash(./scripts/sync-worktrees.sh)",
      "Bash(chmod +x scripts/create-task-worklog.sh scripts/create-daily-worklog.sh)",
      "Bash(git add .artifacts/spec-tasks-templates/ scripts/create-task-worklog.sh scripts/create-daily-worklog.sh scripts/sync-worktrees.sh spacs/tasks/0.1.0-mvp/TODO.yaml spacs/tasks/0.1.0-mvp/README.md)",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat(pm): add comprehensive task management and tracking system\n\nImplement complete task management infrastructure:\n\n1. TODO.yaml - Central Task Registry\n   - All 30 tasks with full metadata\n   - 6 milestones (M0-M5) with dependencies\n   - Task specifications (PRDs, Issues, Tasks)\n   - Git worktree information\n   - Acceptance criteria tracking\n   - Workflow state management\n\n2. Updated README.md with Correct Milestones\n   - M0: Foundation Setup âœ… COMPLETED\n   - M1: API Contracts & Parity (Week 1)\n   - M2: Core Indexing Prototype (Week 2-3)\n   - M3: Service & CLI Alpha (Week 3-5)\n   - M4: Agent Integration Beta (Week 5-7)\n   - M5: Production RC (Week 8-10)\n   - Clear dependency flow diagram\n   - Success criteria for each milestone\n\n3. Worklog Templates (.artifacts/spec-tasks-templates/)\n   - work-summary.template.md - Daily work tracking\n   - commit-log.template.md - Git commit tracking\n   - notes.template.md - Development notes\n   - metadata.template.yaml - Task metadata\n   - README.md - Usage guide\n\n4. Automation Scripts\n   - create-task-worklog.sh - Initialize task worklog\n   - create-daily-worklog.sh - Create daily entries\n   - sync-worktrees.sh - Sync all worktrees with main\n\nKey Features:\n- Dependency tracking with blockers\n- Worklog structure for each task\n- Git metadata integration\n- PR tracking\n- Metrics (hours, lines, coverage)\n- Comments and notes\n\nUsage:\n  # Create task worklog\n  ./scripts/create-task-worklog.sh T-05-01-jsonrpc-schema \"JSON-RPC Schema\" \"Dev Name\"\n\n  # Create daily worklog\n  ./scripts/create-daily-worklog.sh T-05-01-jsonrpc-schema\n\n  # Sync worktrees\n  ./scripts/sync-worktrees.sh\n\nNext: Start T-05-01 (JSON-RPC Schema) in ~/dev-space/CDSAgent-T-05-01-jsonrpc-schema\nEOF\n)\")",
      "Bash(git push origin main)",
      "Bash(git add docs/WORKTREE_WORKFLOW.md)",
      "Bash(git commit -m \"$(cat <<''EOF''\ndocs(workflow): update WORKTREE_WORKFLOW.md as comprehensive SOP\n\nTransform workflow document into complete Standard Operating Procedure\nfor team members implementing Spec-Tasks:\n\n1. Complete Task Development Lifecycle (Phase 0-4)\n   - Phase 0: Prerequisites and setup verification\n   - Phase 1: Task initialization with worklog creation\n   - Phase 2: Daily development routine (SOD, dev, EOD)\n   - Phase 3: Task completion with PR workflow\n   - Phase 4: Post-merge cleanup and sync\n\n2. Worklog Management System\n   - Daily worklog creation and updates\n   - Metadata tracking and metrics\n   - Git commit logging\n   - Development notes capturing\n\n3. Best Practices\n   - Conventional commit format\n   - Testing requirements (unit, integration, E2E)\n   - Documentation standards\n   - Code review checklist\n\n4. Troubleshooting Section\n   - Common rebase conflicts\n   - Symlink issues\n   - Worklog template problems\n   - Metadata tracking errors\n\n5. Complete Example Workflow\n   - Full T-05-01 development walkthrough\n   - Day 1-3 daily routines\n   - Commit examples\n   - PR creation and merge\n\n6. Quick Command Reference\n   - All helper scripts with usage\n   - Common git worktree operations\n   - Task management commands\n\nNow serves as definitive SOP for team members using the\ngit worktree + worklog + TODO.yaml task management system.\nEOF\n)\")"
    ]
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "jina-mcp-tools",
    "context7",
    "DeepWiki",
    "firecrawl-mcp"
  ]
}
